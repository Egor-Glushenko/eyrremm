// If running inside Telegram WebApp, safely init (optional)
let tg = window.Telegram && window.Telegram.WebApp ? window.Telegram.WebApp : null;
if (tg) {
    try {
        tg.ready();
        tg.expand();
    } catch (_) {}
}

// Utility functions
function showMessage(message, type = 'success') {
    // Remove existing messages
    const existingMessages = document.querySelectorAll('.success-message, .error-message');
    existingMessages.forEach(msg => msg.remove());
    
    const messageDiv = document.createElement('div');
    messageDiv.className = type === 'success' ? 'success-message' : 'error-message';
    messageDiv.textContent = message;
    
    const form = document.getElementById('orderForm');
    form.parentNode.insertBefore(messageDiv, form);
    
    // Auto remove after 5 seconds
    setTimeout(() => {
        messageDiv.remove();
    }, 5000);
}

function showLoading(button) {
    const originalText = button.innerHTML;
    button.innerHTML = '<span class="loading"></span> –û—Ç–ø—Ä–∞–≤–∫–∞...';
    button.disabled = true;
    return originalText;
}

function hideLoading(button, originalText) {
    button.innerHTML = originalText;
    button.disabled = false;
}

// Form validation
function validateForm(formData) {
    const requiredFields = ['customerName', 'customerContact', 'jewelryType', 'description'];
    
    for (const field of requiredFields) {
        if (!formData.get(field) || formData.get(field).trim() === '') {
            return `–ü–æ–ª–µ "${getFieldLabel(field)}" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è`;
        }
    }
    
    return null;
}

function getFieldLabel(fieldName) {
    const labels = {
        'customerName': '–í–∞—à–µ –∏–º—è',
        'customerContact': '–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏',
        'jewelryType': '–¢–∏–ø —É–∫—Ä–∞—à–µ–Ω–∏—è',
        'description': '–û–ø–∏—Å–∞–Ω–∏–µ –∂–µ–ª–∞–µ–º–æ–≥–æ —É–∫—Ä–∞—à–µ–Ω–∏—è'
    };
    return labels[fieldName] || fieldName;
}

// Format form data for Telegram
function formatOrderMessage(formData) {
    const jewelryTypeLabels = {
        'ring': '–ö–æ–ª—å—Ü–æ',
        'earrings': '–°–µ—Ä—å–≥–∏',
        'necklace': '–û–∂–µ—Ä–µ–ª—å–µ/–ö—É–ª–æ–Ω',
        'bracelet': '–ë—Ä–∞—Å–ª–µ—Ç',
        'set': '–ö–æ–º–ø–ª–µ–∫—Ç',
        'other': '–î—Ä—É–≥–æ–µ'
    };
    
    const budgetLabels = {
        '5000-10000': '5,000 - 10,000 —Ä—É–±',
        '10000-20000': '10,000 - 20,000 —Ä—É–±',
        '20000-50000': '20,000 - 50,000 —Ä—É–±',
        '50000+': '50,000+ —Ä—É–±'
    };
    
    const timelineLabels = {
        '1week': '–í —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏',
        '2weeks': '–í —Ç–µ—á–µ–Ω–∏–µ 2 –Ω–µ–¥–µ–ª—å',
        '1month': '–í —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞',
        'flexible': '–ì–∏–±–∫–∏–µ —Å—Ä–æ–∫–∏'
    };
    
    let message = `üõçÔ∏è *–ù–û–í–´–ô –ó–ê–ö–ê–ó –£–ö–†–ê–®–ï–ù–ò–Ø*\n\n`;
    message += `üë§ *–ö–ª–∏–µ–Ω—Ç:* ${formData.get('customerName')}\n`;
    message += `üìû *–ö–æ–Ω—Ç–∞–∫—Ç:* ${formData.get('customerContact')}\n`;
    message += `üíé *–¢–∏–ø —É–∫—Ä–∞—à–µ–Ω–∏—è:* ${jewelryTypeLabels[formData.get('jewelryType')] || formData.get('jewelryType')}\n\n`;
    
    if (formData.get('materials')) {
        message += `üîß *–ú–∞—Ç–µ—Ä–∏–∞–ª—ã:* ${formData.get('materials')}\n`;
    }
    
    if (formData.get('colors')) {
        message += `üé® *–¶–≤–µ—Ç–∞:* ${formData.get('colors')}\n`;
    }
    
    if (formData.get('budget')) {
        message += `üí∞ *–ë—é–¥–∂–µ—Ç:* ${budgetLabels[formData.get('budget')] || formData.get('budget')}\n`;
    }
    
    if (formData.get('timeline')) {
        message += `‚è∞ *–°—Ä–æ–∫–∏:* ${timelineLabels[formData.get('timeline')] || formData.get('timeline')}\n`;
    }
    
    message += `\nüìù *–û–ø–∏—Å–∞–Ω–∏–µ:*\n${formData.get('description')}\n\n`;
    message += `üïê *–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞:* ${new Date().toLocaleString('ru-RU')}`;
    
    return message;
}

// (Telegram-related sending removed per requirements)

// Show send options (created programmatically to avoid inline handlers and escaping issues)
function showSendOptions(message) {
    // Remove existing options
    const existingOptions = document.querySelectorAll('.send-options');
    existingOptions.forEach(option => option.remove());
    
    const optionsDiv = document.createElement('div');
    optionsDiv.className = 'send-options';
    optionsDiv.style.marginTop = '20px';
    optionsDiv.style.textAlign = 'center';
    
    const title = document.createElement('h4');
    title.style.marginBottom = '15px';
    title.style.color = '#495057';
    title.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏:';
    optionsDiv.appendChild(title);
    
    const buttonsWrap = document.createElement('div');
    buttonsWrap.style.display = 'flex';
    buttonsWrap.style.gap = '10px';
    buttonsWrap.style.flexWrap = 'wrap';
    buttonsWrap.style.justifyContent = 'center';
    
    const emailBtn = document.createElement('button');
    emailBtn.className = 'send-option-btn';
    emailBtn.textContent = 'üìß –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø–æ—á—Ç—É';
    emailBtn.addEventListener('click', () => sendViaEmail(message));
    
    const tgBtn = document.createElement('button');
    tgBtn.className = 'send-option-btn';
    tgBtn.textContent = 'üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram';
    tgBtn.addEventListener('click', () => sendViaTelegram(message));
    
    const copyBtn = document.createElement('button');
    copyBtn.className = 'send-option-btn';
    copyBtn.textContent = 'üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç';
    copyBtn.addEventListener('click', () => copyToClipboard(message));
    
    buttonsWrap.appendChild(emailBtn);
    buttonsWrap.appendChild(tgBtn);
    buttonsWrap.appendChild(copyBtn);
    
    optionsDiv.appendChild(buttonsWrap);
    
    const form = document.getElementById('orderForm');
    form.parentNode.insertBefore(optionsDiv, form.nextSibling);
}

// Send via email
function sendViaEmail(message) {
    const emailTo = 'samsung20152637@gmail.com'; // –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –†–ï–ê–õ–¨–ù–´–ô EMAIL
    const emailSubject = encodeURIComponent('–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —É–∫—Ä–∞—à–µ–Ω–∏—è');
    const emailBody = encodeURIComponent(message);
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º location.href, —á—Ç–æ–±—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–ª—è–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    const mailtoLink = `mailto:${encodeURIComponent(emailTo)}?subject=${emailSubject}&body=${emailBody}`;
    
    window.location.href = mailtoLink;
    showMessage('üìß –û—Ç–∫—Ä–æ–π—Ç–µ –ø–æ—á—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∏—Å—å–º–æ', 'success');
}

// (Telegram share and copy options removed per requirements)

// Form submission handler
document.getElementById('orderForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const form = e.target;
    const formData = new FormData(form);
    const submitButton = form.querySelector('.submit-btn');
    
    // Validate form
    const validationError = validateForm(formData);
    if (validationError) {
        showMessage(validationError, 'error');
        return;
    }
    
    // Show loading state
    const originalButtonText = showLoading(submitButton);
    
    try {
        // Format the message
        const message = formatOrderMessage(formData);
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∏—Å—å–º–æ –≤ –ø–æ—á—Ç–æ–≤–æ–º –∫–ª–∏–µ–Ω—Ç–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è
        sendViaEmail(message);
        form.reset();
        showMessage('‚úÖ –ü–∏—Å—å–º–æ —Å –∑–∞–∫–∞–∑–æ–º –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç.', 'success');
        
    } catch (error) {
        console.error('Error sending order:', error);
        showMessage('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –Ω–∞–ø—Ä—è–º—É—é.', 'error');
    } finally {
        hideLoading(submitButton, originalButtonText);
    }
});

// Smooth scrolling for navigation links
document.querySelectorAll('.nav-link').forEach(link => {
    link.addEventListener('click', function(e) {
        e.preventDefault();
        const targetId = this.getAttribute('href');
        const targetElement = document.querySelector(targetId);
        
        if (targetElement) {
            targetElement.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
            });
        }
    });
});

// Add some interactive effects
document.addEventListener('DOMContentLoaded', function() {
    // Add hover effects to gallery items
    const galleryItems = document.querySelectorAll('.gallery-item');
    galleryItems.forEach(item => {
        item.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-10px) scale(1.02)';
        });
        
        item.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(0) scale(1)';
        });
    });
    
    // Add focus effects to form inputs
    const formInputs = document.querySelectorAll('input, select, textarea');
    formInputs.forEach(input => {
        input.addEventListener('focus', function() {
            this.parentElement.style.transform = 'scale(1.02)';
        });
        
        input.addEventListener('blur', function() {
            this.parentElement.style.transform = 'scale(1)';
        });
    });
});

// Handle Telegram Web App events
if (tg) {
    // Set up the app
    tg.MainButton.setText('–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–∞—Å—Ç–µ—Ä–æ–º');
    tg.MainButton.show();
    
    tg.MainButton.onClick(function() {
        document.getElementById('order').scrollIntoView({ behavior: 'smooth' });
    });
    
    // Handle back button
    tg.BackButton.onClick(function() {
        window.history.back();
    });
}

// Add some visual feedback for form interactions
document.querySelectorAll('.form-group input, .form-group select, .form-group textarea').forEach(input => {
    input.addEventListener('input', function() {
        if (this.value.trim() !== '') {
            this.style.borderColor = '#4CAF50';
        } else {
            this.style.borderColor = 'rgba(102, 126, 234, 0.2)';
        }
    });
});

// Add loading state to the page
window.addEventListener('load', function() {
    document.body.style.opacity = '0';
    document.body.style.transition = 'opacity 0.5s ease';
    
    setTimeout(() => {
        document.body.style.opacity = '1';
    }, 100);
});
